'''
Joint variant calling with GATK HaplotypeCaller, Google DeepVariant and Illumina Strelka2. 

Notes:
    This pipeline is for use with the production germline pipeline.
    Therefore, some things are assumed, e.g. that input bams are indexed,
    that the reference genome is appropriately indexed, etc.  The pipeline
    will halt if these assumptions are not true, but there are no rules
    to perform these tasks.

Input:
    Customized config.yaml, sorted/indexed bams

Output:
    Merged multi-sample VCFs, one called with HaplotypeCaller, one
    called with DeepVariant, and one called with Strelka2

'''


import os
import subprocess
import glob
from pathlib import Path
from datetime import datetime




# reference the config file
# configfile: "../config/config.yaml"
report: 'report/workflow.rst'
    
# load import variables from the config file
vcf_input_dir = config["vcf_input_dir"]
output_dir    = config["output_dir"]
ref           = config["ref"]
output_prefix = config["output_prefix"]
genome        = config["genome"]
genome_GRC    = config["genome_GRC"]
split_total   = config["split_total"] 


IDS, = glob_wildcards(vcf_input_dir + "/{id}.vcf.gz")
CHUNKS =[str(x).zfill(5) for x in range(split_total)]


rule all:
    input:
        # expand(output_dir + "/autogvp/{chunk}-autogvp-annotated-full.tsv", chunk=["00000","00001","00002","00003","00004"]),
        expand(output_dir + "/merge_call/" + output_prefix + ".autogvp_{set}.tsv", set=["full", "abridged"])

## slow and need provide option to skip it 
rule prep: 
    input: vcf_input_dir + "/{id}.vcf.gz"
    output: 
        vcf = output_dir + "/prep/{id}.vcf.gz",
        tbi=output_dir + "/prep/{id}.vcf.gz.tbi"
    threads: 8
    resources :
        mem_mb=50000
    envmodules: "bcftools/1.13"
    params: ref=ref
    shell: '''
        bcftools view -e 'ALT="*"' -Ou {input} |bcftools norm -m-both -Ou --threads {threads} | bcftools norm -f {params.ref} | bcftools annotate -Ou -x ID  -I +"%CHROM:%POS:%REF:%ALT" --threads {threads} | bcftools annotate -Oz -x FORMAT,^INFO/AC,^INFO/AF,^INFO/AN -o {output.vcf}
        tabix -p vcf {output.vcf}
    '''


### merge and also make some processing here
rule merge_vcf:
    input: expand(output_dir + "/prep/{id}.vcf.gz", id=IDS)
    output: 
        gz=output_dir+"/"+output_prefix + ".vcf.gz",
        tbi=output_dir+"/"+output_prefix + ".vcf.gz.tbi"
    envmodules: "bcftools/1.13"
    resources :
        mem_mb=20000
    threads: 8
    shell: """
        bcftools concat -a -D -Ou --threads {threads} {input} | bcftools sort -Oz -o {output.gz}  ; tabix -p vcf {output.gz}
    """

rule get_vcf_header:
    input: output_dir+"/"+output_prefix + ".vcf.gz"
    output: temp(output_dir+"/"+output_prefix + ".vcf_header")
    resources :
        mem_mb=4000
    envmodules: "bcftools/1.13"
    shell: "bcftools view -h {input} > {output}"

rule split_vcf: 
    input: output_dir+"/"+output_prefix + ".vcf.gz"
    output: temp(expand(output_dir+"/splitted/{chunk}.txt", chunk=CHUNKS))
    params: split_total = split_total, prefix=""
    resources :
        mem_mb=10000
    shell: '''
    tmpfile=$(mktemp /tmp/abc-script.XXXXXX); zcat {input} | grep -v "^#"  > $tmpfile; split --numeric-suffixes=0 -n l/{params.split_total} --suffix-length=5  --additional-suffix=".txt" $tmpfile   "$(dirname {output[0]})/"

    '''

rule add_vcf_header:
    input: body=output_dir+"/splitted/{chunk}.txt",
           header=output_dir+"/"+output_prefix + ".vcf_header"
    output: output_dir+"/splitted/{chunk}.vcf"
    resources :
        mem_mb=4000
    shell: '''
        cat {input.header} {input.body} > {output}
    '''

rule vep_ann:
    input: 
        vcf = output_dir+"/splitted/{chunk}.vcf"
    output:
        vcf = output_dir+"/vep_ann/{chunk}_VEP.vcf"
    envmodules: "VEP/104"
    params: 
        grc=genome_GRC
    shell: """
        vep --offline --cache --dir_cache $VEP_CACHEDIR --fasta $VEP_CACHEDIR/{params.grc}.fa --refseq --use_given_ref --species homo_sapiens --assembly {params.grc} --fork 1 --xref_refseq --hgvs --hgvsg --canonical --symbol --distance 0 --exclude_predicted --flag_pick --lookup_ref --force --input_file {input.vcf} --output_file {output.vcf} --format vcf --vcf --no_stats --numbers
    """

### Note to modify /home/zhuw10/git/InterVar-2.2.1/config.ini
# database_names = refGene esp6500siv2_all 1000g2015aug avsnp147 dbnsfp42a clinvar_20210501 gnomad_genome dbscsnv11 rmsk ensGene knownGene
rule intervar_ann:
    input: 
        vcf = output_dir+"/vep_ann/{chunk}_VEP.vcf"
    output:
        multiext(output_dir+"/intervar_ann/{chunk}_VEP." + genome + "_multianno",  ".txt", ".txt.grl_p", ".txt.intervar")
    envmodules: "annovar"
    params: 
        genome=genome,
        prefix= output_dir+"/intervar_ann/{chunk}_VEP"
    shell: """
        /home/zhuw10/git/InterVar-2.2.1/Intervar.py -i {input.vcf} --input_type=VCF -o {params.prefix} -b {params.genome} -t /home/zhuw10/git/InterVar-2.2.1/intervardb -d $ANNOVAR_DATA/{params.genome} --table_annovar=$ANNOVAR_HOME/table_annovar.pl --convert2annovar=$ANNOVAR_HOME/convert2annovar.pl --annotate_variation=$ANNOVAR_HOME/annotate_variation.pl
    """

### I cannot use Jung's config.ini as
# genome = /data/kimjua/referencegenome/GRCh38.d1.vd1.fa
rule autopvs1:
    input: 
        vcf = output_dir+"/vep_ann/{chunk}_VEP.vcf"
    output:
        output_dir+"/autopvs1/{chunk}_autopvs1.txt"
    envmodules: "python"
    params: 
        genome=genome
    shell: """
        python /data/CGB_share/autopvs1_wz/autoPVS1_from_VEP_vcf.py --genome_version {params.genome} --vep_vcf {input.vcf} > {output}
    """

rule annovar_ann:
    input: 
        vcf = output_dir+"/vep_ann/{chunk}_VEP.vcf"
    output:
        multiext(output_dir+"/annovar_ann/{chunk}_VEP", ".avinput", "."+genome+"_multianno.txt", "."+genome+"_multianno.vcf")
    envmodules: "annovar"
    params: 
        genome=genome,
        prefix= output_dir+"/annovar_ann/{chunk}_VEP"
    shell: """
        perl $ANNOVAR_HOME/table_annovar.pl {input} $ANNOVAR_DATA/{params.genome} --buildver {params.genome} --out {params.prefix} --remove --protocol gnomad211_exome,gnomad211_genome --operation f,f --vcfinput
    """

rule autogvp:
    input:
        vcf = output_dir+"/vep_ann/{chunk}_VEP.vcf",
        intervar = output_dir+"/intervar_ann/{chunk}_VEP." + genome + "_multianno.txt.intervar",
        annovar = output_dir+"/annovar_ann/{chunk}_VEP." + genome + "_multianno.txt",
        autopvs1 = output_dir+"/autopvs1/{chunk}_autopvs1.txt",
        clinvar_vcf = config["clinvar"]["dir"] + "/" + config["clinvar"]["vcf"],
        selected_submission = config["clinvar"]["dir"] + "/" + config["clinvar"]["selected_submission"],
        variant_summary = config["clinvar"]["dir"] + "/" + config["clinvar"]["variant_summary"],
        submission_summary = config["clinvar"]["dir"] + "/" + config["clinvar"]["submission_summary"],
        concept_ids = config["conceptIDs"]
    output:
        full=output_dir + "/autogvp/{chunk}-autogvp-annotated-full.tsv",
        abridged=output_dir + "/autogvp/{chunk}-autogvp-annotated-abridged.tsv",
    container: "docker://pgc-images.sbgenomics.com/naqvia/autogvp:latest"
    shell: """
        AutoGVP/run_autogvp.sh --workflow custom \
            --vcf {input.vcf}  \
            --intervar {input.intervar} \
            --multianno {input.annovar} \
            --autopvs1 {input.autopvs1} \
            --outdir $(dirname {output.full}) \
            --out {wildcards.chunk} \
            --clinvar={input.clinvar_vcf} \
            --selected_clinvar_submissions={input.selected_submission} \
            --variant_summary={input.variant_summary} \
            --submission_summary={input.submission_summary} \
            --conceptIDs={input.concept_ids} \
            --conflict_res="latest"
    """

### sort the data by chr and start and create a new column vid
rule merge_call:
    input: 
        full=expand(output_dir + "/autogvp/{chunk}-autogvp-annotated-full.tsv", chunk=CHUNKS),
        abridged = expand(output_dir + "/autogvp/{chunk}-autogvp-annotated-abridged.tsv", chunk=CHUNKS)
    output: 
        full = output_dir + "/merge_call/" + output_prefix + ".autogvp_full.tsv",
        abridged = output_dir + "/merge_call/" + output_prefix + ".autogvp_abridged.tsv"
    resources:
        mem_mb = 40000,
        threads = 12
    shell: """
        csvtk concat -E -t {input.full} | csvtk sort -t -k chr:N -k start:n  -E  | csvtk mutate2 -s -t -n vid -e '$chr + ":" + $start + ":" +  $ref + ":" + $alt'  > {output.full}
        csvtk concat -E -t {input.abridged} | csvtk sort -t -k chr:N -k start:n  -E  | csvtk mutate2 -s -t -n vid -e '$chr + ":" + $start + ":" +  $ref + ":" + $alt'  > {output.abridged}
    """